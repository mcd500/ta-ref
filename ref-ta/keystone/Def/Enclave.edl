/*
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * Copyright (C) 2019 National Institute of Advanced Industrial Science
 *                           and Technology (AIST)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    /* structure definition */
    struct ree_time_t {
        uint32_t seconds;
        uint32_t millis;
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in, ]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        size_t ocall_print_string([in, string] const char *str);
    };

    /* 
     * ocall_open_file - invokes OCALL to get file descriptor inside the enclave.
     *  [in, string]: copy pointer to App outside.
     *  [out]: return descriptor back to App.
     */
    untrusted {
        int ocall_open_file([in, string] const char *name, int flags);
    };

    /* 
     * ocall_close_file - invokes OCALL to get close file descriptor inside the enclave.
     */
    untrusted {
        int ocall_close_file(int fdesc);
    };

    /* 
     * ocall_read_file - invokes OCALL to read from file descriptor inside the enclave.
     *  [out]: copy pointer to App inside.
     *  [size=len]: specifies 'ptr' is a buffer with 'len' size.
     */
    untrusted {
        int ocall_read_file(int fdesc,
	     		    [out, size=len] char *buf, size_t len);
    };

    /* 
     * ocall_write_file - invokes OCALL to write to file descriptor inside the enclave.
     *  [in]: copy pointer to App outside.
     *  [size=len]: specifies 'ptr' is a buffer with 'len' size.
     */
    untrusted {
        int ocall_write_file(int fdesc,
	     		     [in, size=len] const char *name, size_t len);
    };

    /* 
     * ocall_ree_time - invokes OCALL to get unix time inside the enclave.
     *  [out]: copy pointer to App inside.
     */
    untrusted {
        int ocall_ree_time([out] struct ree_time_t *time);
    };

    /* 
     * ocall_getrandom - invokes OCALL to get random bytes inside the enclave.
     *  [out]: copy pointer to App inside.
     *  [size=len]: specifies 'ptr' is a buffer with 'len' size.
     */
    untrusted {
        ssize_t ocall_getrandom([out, size=len] char *buf, size_t len,
	    		        unsigned int flags);
    };

    trusted {
        /* virtual ecall */
        public void ecall_ta_main(void);
    };

};
