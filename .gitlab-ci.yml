variables:
#    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
    DOCKER_IMAGE: trasioteam/ta_ref_devel
    DOCKER_IMAGE_OPTEE: trasioteam/optee

before_script:
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD}

stages:
    - test_mini
    - test_gp
    - experimental

.test_template: &test_definition
    variables:
        ENVS: env/dummy.sh
    tags:
        - ta-ref
    before_script:
        - git submodule update --init --recursive
        - source ${ENVS}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper

# `sudo gitlab-runner register --non-interactive --docker-pull-policy "if-not-present" --url "https://192.168.100.100/" --registration-token ${THIS_TOKEN} --name ref-ta --tag-list ref-ta --executor docker --docker-image ubuntu:20.04` in advance.
.test_template101: &test_definition101
    variables:
        ENVS: env/dummy.sh
    tags:
        - ref-ta
    before_script:
        - git submodule sync --recursive
        - git submodule update --init --recursive
        - source ${ENVS}
        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper


keystone_qemu_default:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run TEST_DIR=${TEST_DIR}
keystone_qemu_test_gp:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}

keystone_hifive_default:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR}
keystone_hifive_test_gp:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR}

keystone_trvsim_test_gp:
    only:
        - master
    variables:
        # OVPSIM_LICENCE and MAC_ADDR are defined in CI/CD settings -> Variables.
        ENVS: env/dummy.sh
        SDIMAGE_URL: http://192.168.100.100:2000/keystone_trvsim_hifive_sdimage.tar.xz
        IMAGE_DIR: ${CI_PROJECT_DIR}/image
        CONTAINER_IMAGE_DIR: /tmp/image
        CONTAINER_OVPSIM_PATH: /home/trv/Imperas.20200628/OVPsim.lic
        PORT: 10022
        CONTAINER_NAME: trvsim_${CI_COMMIT_SHORT_SHA}
        WAIT_TIME: 60
        TA_REF_WORKDIR: /home/main/ref-ta
        TA_REF_CONTAINER_IMAGE: ${DOCKER_IMAGE}:keystone_trvsim
        ENV: env/keystone.sh
        TEST_DIR: test_gp
    tags:
        - shell
    stage: test_gp
    before_script:
        # launch TRV simulator at background
        - mkdir -p ${IMAGE_DIR}
        - wget ${SDIMAGE_URL} -o /dev/null
        - tar xf keystone_trvsim_hifive_sdimage.tar.xz -C ${IMAGE_DIR}
        - docker run --rm -d -v ${IMAGE_DIR}:${CONTAINER_IMAGE_DIR} -v ${OVPSIM_LICENCE}:${CONTAINER_OVPSIM_PATH} --name ${CONTAINER_NAME} -p ${PORT}:${PORT} --hostname trvsim --mac-address ${MAC_ADDR} trasioteam/riscv_toolchain:trvsim
        - rm -f ~/.ssh/known_hosts
        - sleep ${WAIT_TIME}
    script:
        # update this repo
        - git submodule update --init --recursive
        - docker run --rm -v ${CI_PROJECT_DIR}:${TA_REF_WORKDIR} -w ${TA_REF_WORKDIR} ${TA_REF_CONTAINER_IMAGE} /bin/bash -c "source ${ENV} && make build test run MACHINE=TRVSIM TEST_DIR=${TEST_DIR}"
    after_script:
        - docker run --rm -v ${CI_PROJECT_DIR}:${TA_REF_WORKDIR} -w ${TA_REF_WORKDIR} ${TA_REF_CONTAINER_IMAGE} /bin/bash -c "source ${ENV} && make mrproper"
        # cleanup
        - docker exec ${CONTAINER_NAME} cat "uart0.log"
        - docker exec ${CONTAINER_NAME} cat "uart1.log"
        - docker stop ${CONTAINER_NAME}

keystone_vc707_default:
    <<: *test_definition
    only:
        - master
    # This is tentative, but actually it works!
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_mini
    stage: test_mini
    only:
        - todo
    script:
        - make build test run MACHINE=VC707 TEST_DIR=${TEST_DIR}

sgx_sim_default:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run TEST_DIR=${TEST_DIR}

sgx_sim_test_gp:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}

sgx_nuc_default:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run MACHINE=NUC TEST_DIR=${TEST_DIR}
sgx_nuc_test_gp:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=NUC TEST_DIR=${TEST_DIR}

optee_qemu_default:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:optee_qemu_v8
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run TEST_DIR=${TEST_DIR}
optee_qemu_test_gp:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:optee_qemu_v8
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}

optee_rpi3_default:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:optee_rpi3
    variables:
        ENVS: env/optee_rpi3.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run MACHINE=RPI3 TEST_DIR=${TEST_DIR}
optee_rpi3_test_gp:
    <<: *test_definition
    only:
        - master
    image: ${DOCKER_IMAGE}:optee_rpi3
    variables:
        ENVS: env/optee_rpi3.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=RPI3 TEST_DIR=${TEST_DIR}

optee_qemu_teep:
    <<: *test_definition
    only:
        - teep-device
    image: ${DOCKER_IMAGE_OPTEE}:qemu_optee_teep
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - echo "Hi"
        - echo ${OPTEE_DIR}
        - ls -la /
        - pwd
        - ls -la
        - cd ~; pwd; ls -la; cd /builds/rinkai/ta-ref
        - make build test run TEST_DIR=${TEST_DIR}

optee_qemu_teep_device:
    <<: *test_definition
    only:
        - teep-device
    image: ${DOCKER_IMAGE_OPTEE}:qemu_optee_teep
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - echo "Hi"
        - apt-get -y install nodejs; apt-get -y install npm cmake
        - echo ${OPTEE_DIR}
        - ls -la /
        - pwd
        - ls -la
        - cd ~; pwd; ls -la; cd /builds/rinkai/; ls -la; cd ta-ref/; ls -la; cd teep-device
        - make clean-optee && make build-optee
