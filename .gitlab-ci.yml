variables:
#    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
    DOCKER_IMAGE: docker.io/trasioteam/ta_ref_devel
    DOCKER_IMAGE_OPTEE: docker.io/trasioteam/optee

stages:
    - test_mini
    - test_gp
    - test_perf
    - experimental

.test_teep_template: &test_teep_definition
    variables:
        ENVS: env/dummy.sh
    tags:
        - docker117-ubuntu
    before_script:
#        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD} docker.io
        - sed -i '/^https:\/\/gitlab-ci-token/d' ~/.git-credentials || true
        - git config --global http.sslVerify false
        - git config --global credential.helper 'store --file ~/.git-credentials'
        - echo https://gitlab-ci-token:${CI_JOB_TOKEN}@192.168.100.100 >> ~/.git-credentials
        - echo https://gitlab-ci-token:${CI_JOB_TOKEN}@192.168.100.100:443 >> ~/.git-credentials
        - git submodule sync --recursive
        - git submodule update --init --recursive
        - source ${ENVS}
    after_script:
        - source ${ENVS}
        # cleanup
#        - make mrproper

.test_template117: &test_definition117
    variables:
        ENVS: env/dummy.sh
    tags:
        - docker117-ubuntu
    before_script:
#        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD} docker.io
        - git submodule sync --recursive
        - git submodule update --init --recursive
        - source ${ENVS}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper


.test_template101: &test_definition101
    variables:
        ENVS: env/dummy.sh
    tags:
        - docker101-ubuntu
    before_script:
        - git submodule sync --recursive
        - git submodule update --init --recursive
        - source ${ENVS}
#        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper

keystone_qemu_default:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run TEST_DIR=${TEST_DIR}
keystone_qemu_test_gp:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}
keystone_qemu_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

keystone_hifive_default:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR}
keystone_hifive_test_gp:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR}
keystone_hifive_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

keystone_trvsim_test_gp:
    variables:
        # OVPSIM_LICENCE and MAC_ADDR are defined in CI/CD settings -> Variables.
        ENVS: env/dummy.sh
        SDIMAGE_URL: http://192.168.100.100:2000/keystone_trvsim_hifive_sdimage.tar.xz
        IMAGE_DIR: ${CI_PROJECT_DIR}/image
        CONTAINER_IMAGE_DIR: /tmp/image
        CONTAINER_OVPSIM_PATH: /home/trv/Imperas.20200628/OVPsim.lic
        PORT: 10022
        CONTAINER_NAME: trvsim_${CI_COMMIT_SHORT_SHA}
        WAIT_TIME: 60
        TA_REF_WORKDIR: /home/main/ref-ta
        TA_REF_CONTAINER_IMAGE: ${DOCKER_IMAGE}:keystone_trvsim
        ENV: env/keystone.sh
        TEST_DIR: test_gp
    tags:
        - trvsim
    stage: test_gp
    before_script:
        # launch TRV simulator at background
        - mkdir -p ${IMAGE_DIR}
        - wget ${SDIMAGE_URL} -o /dev/null
        - tar xf keystone_trvsim_hifive_sdimage.tar.xz -C ${IMAGE_DIR}
        - docker run --rm -d -v ${IMAGE_DIR}:${CONTAINER_IMAGE_DIR} -v ${OVPSIM_LICENCE}:${CONTAINER_OVPSIM_PATH} --name ${CONTAINER_NAME} -p ${PORT}:${PORT} --hostname trvsim --mac-address ${MAC_ADDR} trasioteam/riscv_toolchain:trvsim
        - rm -f ~/.ssh/known_hosts
        - sleep ${WAIT_TIME}
    script:
        # update this repo
        - git submodule update --init --recursive
        - docker run --rm -v ${CI_PROJECT_DIR}:${TA_REF_WORKDIR} -w ${TA_REF_WORKDIR} ${TA_REF_CONTAINER_IMAGE} /bin/bash -c "source ${ENV} && make build test run MACHINE=TRVSIM TEST_DIR=${TEST_DIR}"
    after_script:
        - docker run --rm -v ${CI_PROJECT_DIR}:${TA_REF_WORKDIR} -w ${TA_REF_WORKDIR} ${TA_REF_CONTAINER_IMAGE} /bin/bash -c "source ${ENV} && make mrproper"
        # cleanup
        - docker exec ${CONTAINER_NAME} cat "uart0.log"
        - docker exec ${CONTAINER_NAME} cat "uart1.log"
        - docker stop ${CONTAINER_NAME}

keystone_vc707_default:
    <<: *test_definition117
    # This is tentative, but actually it works!
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_mini
    stage: test_mini
    only:
        - todo
    script:
        - make build test run MACHINE=VC707 TEST_DIR=${TEST_DIR}

sgx_sim_default:
    # EPYC server seems to get fault. see https://192.168.100.100/rinkai/ta-ref/-/jobs/12748
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run TEST_DIR=${TEST_DIR}
sgx_sim_test_gp:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}
sgx_sim_test_perf:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

sgx_nuc_default:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run MACHINE=NUC TEST_DIR=${TEST_DIR}
sgx_nuc_test_gp:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=NUC TEST_DIR=${TEST_DIR}
sgx_nuc_test_perf:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run MACHINE=NUC TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

optee_qemu_default:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_qemu_v8
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run TEST_DIR=${TEST_DIR}
optee_qemu_test_gp:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_qemu_v8
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}
optee_qemu_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_qemu_v8
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

optee_rpi3_default:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_rpi3
    variables:
        ENVS: env/optee_rpi3.sh
        TEST_DIR: test_mini
    stage: test_mini
    script:
        - make build test run MACHINE=RPI3 TEST_DIR=${TEST_DIR}
optee_rpi3_test_gp:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_rpi3
    variables:
        ENVS: env/optee_rpi3.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=RPI3 TEST_DIR=${TEST_DIR}
optee_rpi3_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_rpi3
    only:
        # need to rebuild and burn new image
        - todo
    variables:
        ENVS: env/optee_rpi3.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run MACHINE=RPI3 TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

optee_qemu_teep:
    <<: *test_teep_definition
    image: ${DOCKER_IMAGE_OPTEE}:optee_qemu_teep
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}

optee_qemu_teep_device:
    <<: *test_teep_definition
    image: ${DOCKER_IMAGE_OPTEE}:optee_qemu_teep
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: experimental
    script:
        - apt-get -y install nodejs; apt-get -y install npm cmake
        - cd ~; pwd; ls -la; cd /builds/rinkai/; ls -la; cd ta-ref/; ls -la; cd teep-device
        - make clean-optee && make build-optee
