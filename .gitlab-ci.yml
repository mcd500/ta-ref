variables:
#    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKER_IMAGE: docker.io/trasioteam/ta_ref_devel
    DOCKER_TEEP_IMAGE: docker.io/trasioteam/ta_ref_teep_devel
    DOCKER_TAMPROTO_IMAGE: docker.io/trasioteam/tamproto
    AIST_DOCKER_IMAGE: docker.io/aistcpsec/tee-dev
    AIST_DOCKER_DISTRO_IMAGE: docker.io/aistcpsec/tee-distro-dev


stages:
    - experimental
    - generate_docs
    - test_hello
    - test_gp
    - test_perf
    - trigger

### ANCHORS - START ####

.disable_template: &disable_definition
    only:
        - temporary

.test_teep_template: &test_teep_definition
    variables:
        ENVS: env/dummy.sh
    tags:
        - docker117
    before_script:
#        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD} docker.io
#        - sed -i '/^https:\/\/gitlab-ci-token/d' ~/.git-credentials || true
#        - git config --global http.sslVerify false
#        - git config --global credential.helper 'store --file ~/.git-credentials'
#        - echo https://gitlab-ci-token:${CI_JOB_TOKEN}@192.168.100.100 >> ~/.git-credentials
#        - echo https://gitlab-ci-token:${CI_JOB_TOKEN}@192.168.100.100:443 >> ~/.git-credentials
        - source ${ENVS}
    after_script:
        - source ${ENVS}

.test_template117: &test_definition117
    variables:
        ENVS: env/dummy.sh
    tags:
        - docker117
    before_script:
#        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD} docker.io
#        - sed -i '/^https:\/\/gitlab-ci-token/d' ~/.git-credentials || true
#        - git config --global http.sslVerify false
#        - git config --global credential.helper 'store --file ~/.git-credentials'
#        - echo https://gitlab-ci-token:${CI_JOB_TOKEN}@192.168.100.100 >> ~/.git-credentials
#        - echo https://gitlab-ci-token:${CI_JOB_TOKEN}@192.168.100.100:443 >> ~/.git-credentials
        - source ${ENVS}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper

.test_template101: &test_definition101
    variables:
        ENVS: env/dummy.sh
    tags:
        - ref-ta
    before_script:
#        - git submodule sync --recursive
#        - git submodule update --init --recursive
        - source ${ENVS}
#        - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper

.tamproto_service: &tamproto_service
    services:
        - name: ${DOCKER_TAMPROTO_IMAGE}:teep-device-interop_2020-07-06
          alias: tamproto


.test_template117_aist_sgx: &test_definition117_aist_sgx
    variables:
        ENVS: env/dummy.sh
    tags:
        - ta-ref
    before_script:
#        - git submodule sync --recursive
#        - git submodule update --init --recursive
        - source /opt/intel/sgxsdk/environment
        - source ${ENVS}
    after_script:
        - source ${ENVS}
        # cleanup
        - make mrproper

### ANCHORS - END ###

### KEYSTONE - START ###

keystone_qemu_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}


keystone_hifive_default:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_hello
    stage: test_hello
    only:
        - under_development
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR}

keystone_hifive_test_gp:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    only:
        - under_development
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR}
#        - make mrproper
#        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR} EDGER_TYPE=KEEDGER8R

keystone_hifive_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:keystone_hifive
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    only:
        - under_development
    script:
        - make build test run MACHINE=HIFIVE TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

# TRV simulator(ver.20210304)
keystone_trvsim_default:
    <<: *disable_definition
    variables:
        # OVPSIM_LICENCE_PATH and MAC_ADDR are defined in CI/CD settings -> Variables.
        SDIMAGE_URL: http://192.168.100.100:2000/keystone_trvsim_hifive_v1.0.0_sdimage.tar.xz
        # SSH_PORT, OVPSIM_LICENCE_PATH, MAC_ADDR and IMAGE_DIR are required in .gitlab-ci.yml
        IMAGE_DIR: ${CI_PROJECT_DIR}/image
        SSH_PORT: 10022
        TEST_DIR: test_hello
    tags:
        - shell117
    stage: test_hello
    before_script:
        - wget ${SDIMAGE_URL} -o /dev/null
        - mkdir -p ${IMAGE_DIR}
        - tar xf keystone_trvsim_hifive_v1.0.0_sdimage.tar.xz -C ${IMAGE_DIR}
        - git submodule update --init --recursive
    script:
        - docker-compose -p ${CI_JOB_NAME} -f services/docker-compose.trvsim_ci.yml up --abort-on-container-exit
    after_script:
        # cleanup
        - docker-compose -p ${CI_JOB_NAME} -f services/docker-compose.trvsim_ci.yml down -v

keystone_trvsim_test_gp:
    <<: *disable_definition
    variables:
        # OVPSIM_LICENCE_PATH and MAC_ADDR are defined in CI/CD settings -> Variables.
        SDIMAGE_URL: http://192.168.100.100:2000/keystone_trvsim_hifive_v1.0.0_sdimage.tar.xz
        # SSH_PORT, OVPSIM_LICENCE_PATH, MAC_ADDR and IMAGE_DIR are required in .gitlab-ci.yml
        IMAGE_DIR: ${CI_PROJECT_DIR}/image
        SSH_PORT: 10025
        TEST_DIR: test_gp
    tags:
        - shell117
    stage: test_gp
    before_script:
        - wget ${SDIMAGE_URL} -o /dev/null
        - mkdir -p ${IMAGE_DIR}
        - tar xf keystone_trvsim_hifive_v1.0.0_sdimage.tar.xz -C ${IMAGE_DIR}
        - git submodule update --init --recursive
    script:
        - docker-compose -f services/docker-compose.trvsim_ci.yml up --abort-on-container-exit
    after_script:
        # cleanup
        - docker-compose -f services/docker-compose.trvsim_ci.yml down -v

## vc707
keystone_vc707_default:
    <<: *test_definition117
    <<: *disable_definition
    # This is tentative, but actually it works!
    image: ${DOCKER_IMAGE}:keystone_vc707
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_hello
    stage: test_hello
    script:
        - make build test run MACHINE=VC707 TEST_DIR=${TEST_DIR}

keystone_vc707_test_gp:
    <<: *test_definition117
    <<: *disable_definition
    image: ${DOCKER_IMAGE}:keystone_vc707
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run MACHINE=VC707 TEST_DIR=${TEST_DIR}
        - make mrproper
        - make build test run MACHINE=VC707 TEST_DIR=${TEST_DIR} EDGER_TYPE=KEEDGER8R

keystone_vc707_test_perf:
    <<: *test_definition117
    <<: *disable_definition
    image: ${DOCKER_IMAGE}:keystone_vc707
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run MACHINE=VC707 TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

keystone_qemu_test_teep:
    <<: *test_definition117
    <<: *tamproto_service
    only:
        - /^teep-device.*$/
    image: ${DOCKER_TEEP_IMAGE}:keystone_qemu
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: experimental
    script:
        - make
        - cd teep-device
        - make
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - curl "http://$TAMIP:8888/api/tam"
        - make test TAM_URL="http://$TAMIP:8888" | tr -d "\r"

keystone_qemu_test_teep:
    tags:
        - shell117
    variables:
        DOCKER_COMPOSE_PATH: services/docker-compose.teep_keystone_qemu.yml
        PROJECT: teep_keystone_qemu
    only:
        - /^teep-device.*$/
    tags:
        - shell117
    stage: experimental
    before_script:
        - git submodule update --init --recursive
    script:
        - docker-compose -p ${PROJECT} -f ${DOCKER_COMPOSE_PATH} up --abort-on-container-exit
    after_script:
        - docker-compose -p ${PROJECT} -f ${DOCKER_COMPOSE_PATH} down -v

keystone_trvsim_test_teep:
    tags:
        - shell117
    only:
        - /^teep-device.*$/
    variables:
        # OVPSIM_LICENCE and MAC_ADDR are defined in CI/CD settings -> Variables.
        SDIMAGE_URL: http://192.168.100.100:2000/keystone_trvsim_hifive_sdimage.tar.xz
        # PORT, OVPSIM_LICENCE, MAC_ADDR and IMAGE_DIR are required in .gitlab-ci.yml
        IMAGE_DIR: ${CI_PROJECT_DIR}/image
        SSH_PORT: 10125
        DOCKER_COMPOSE_PATH: services/docker-compose.teep_keystone_trvsim.yml
        PROJECT: teep_keystone_trvsim
    tags:
        - shell117
    stage: experimental
    before_script:
        - wget ${SDIMAGE_URL} -o /dev/null
        - mkdir -p ${IMAGE_DIR}
        - tar xf keystone_trvsim_hifive_sdimage.tar.xz -C ${IMAGE_DIR}
        - git submodule update --init --recursive
    script:
        - docker-compose -p ${PROJECT} -f ${DOCKER_COMPOSE_PATH} up --abort-on-container-exit
    after_script:
        - docker-compose -p ${PROJECT} -f ${DOCKER_COMPOSE_PATH} down -v


### Keystone on AIST Docker Image - START ###
keystone_qemu_default_aist:
    <<: *test_definition117
    image: ${AIST_DOCKER_IMAGE}:keystone-1.0.0
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_hello
    stage: test_hello
    script:
        - make build test-bin MACHINE=SIM TEST_DIR=${TEST_DIR}

keystone_qemu_test_gp_aist:
    <<: *test_definition117
    image: ${AIST_DOCKER_IMAGE}:keystone-1.0.0
    variables:
        ENVS: env/keystone.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test-bin MACHINE=SIM TEST_DIR=${TEST_DIR}
### Keystone on AIST Docker Image - END ###

### KEYSTONE - END ###

### SGX - START ###
sgx_sim_default:
    # EPYC server seems to get fault. see https://192.168.100.100/rinkai/ta-ref/-/jobs/12748
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_hello
    stage: test_hello
    script:
        - make build test run TEST_DIR=${TEST_DIR}

sgx_sim_test_gp:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}

sgx_sim_test_perf:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

sgx_nuc_test_perf:
    <<: *test_definition101
    image: ${DOCKER_IMAGE}:sgx
    only:
        - temporary
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run MACHINE=NUC TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

### Intel SGX on AIST Docker Image - START ###
sgx_sim_default_aist:
    <<: *test_definition117_aist_sgx
    image: ${AIST_DOCKER_IMAGE}:sgx-2.10
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_hello
    stage: test_hello
    script:
        - make build test-bin MACHINE=SIM TEST_DIR=test_hello

sgx_sim_test_gp_aist:
    <<: *test_definition117_aist_sgx
    image: ${AIST_DOCKER_IMAGE}:sgx-2.10
    variables:
        ENVS: env/sgx_x64.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test-bin MACHINE=SIM TEST_DIR=test_gp

### Intel SGX on AIST Docker Image - END ###

### SGX - END ###

### OPTEE - START ###
optee_qemu_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_qemu_v8
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    stage: test_perf
    script:
        - make build test run TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}


optee_rpi3_test_perf:
    <<: *test_definition117
    image: ${DOCKER_IMAGE}:optee_rpi3
    variables:
        ENVS: env/optee_rpi3.sh
        TEST_DIR: test_gp
        PROFILER: "ON"
        DEBUG_TYPE: "RELEASE"
    only:
        - todo
    stage: test_perf
    script:
        - make build test run MACHINE=RPI3 TEST_DIR=${TEST_DIR} PROFILER=${PROFILER} DEBUG_TYPE=${DEBUG_TYPE}

optee_qemu_teep:
    <<: *test_definition117
    only:
        - temporary
    image: ${DOCKER_TEEP_IMAGE}:optee_qemu
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test run TEST_DIR=${TEST_DIR}

optee_qemu_teep_device:
    <<: *test_definition117
    <<: *tamproto_service
    only:
        - /^teep-device.*$/
    image: ${DOCKER_TEEP_IMAGE}:optee_qemu
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: experimental
    script:
        - make
        - cd teep-device
        - make
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - curl "http://$TAMIP:8888/api/tam"
        - make test TAM_URL="http://$TAMIP:8888" | tr -d "\r"

pctest_teep_device:
    <<: *test_definition117
    <<: *tamproto_service
    only:
        - /^teep-device.*$/
    image: ${DOCKER_TEEP_IMAGE}:optee_qemu
    variables:
        ENVS: env/optee_qemu_teep.sh
        TEST_DIR: test_gp
    stage: experimental
    script:
        - export TEE=pc
        - cd teep-device
        - make
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - curl "http://$TAMIP:8888/api/tam"
        - make test TAM_URL="http://$TAMIP:8888" | tr -d "\r"

### Optee on AIST Docker Image - START ###
optee_qemu_default_aist:
    <<: *test_definition117
    image: ${AIST_DOCKER_IMAGE}:optee-3.10.0
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_hello
    stage: test_hello
    script:
        - make build test-bin MACHINE=SIM TEST_DIR=${TEST_DIR}

optee_qemu_test_gp_aist:
    <<: *test_definition117
    image: ${AIST_DOCKER_IMAGE}:optee-3.10.0
    variables:
        ENVS: env/optee_qemu.sh
        TEST_DIR: test_gp
    stage: test_gp
    script:
        - make build test-bin MACHINE=SIM TEST_DIR=${TEST_DIR}

### Optee on AIST Docker Image - END ###

### OPTEE - END ###

### DOXYGEN - START ###
doxygen:
    <<: *test_teep_definition
    image: ${AIST_DOCKER_DISTRO_IMAGE}:doxygen-20.04
    variables:
        ENVS: env/keystone.sh
    stage: generate_docs
    script:
        - make docs
    artifacts:
        paths:
            - docs/ta-ref.pdf
            - docs/ta-ref-spec.pdf
            - docs/html_readme.tar.gz
            - docs/html_spec.tar.gz
        expire_in: 1 week

### DOXYGEN - START ###

trigger_docker-taref-dev:
    variables:
        GIT_STRATEGY: none
        GIT_SUBMODULE_STRATEGY: none
        TOKEN: 29d9f4acb972460d03f8bd22e76880
    stage: trigger
    tags:
        - fast-shells
    script:
        - "curl -X POST -F token=${TOKEN} -F ref=main
            -k https://192.168.100.100/api/v4/projects/132/trigger/pipeline"

